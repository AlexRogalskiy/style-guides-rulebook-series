{
  "name": "Spectral Example",
  "description": "",
  "formats": [
    "oas2",
    "oas3",
    "oas3.0",
    "oas3.1"
  ],
  "aliases": {},
  "rules": {},
  "extends": [
    "cHJqOjEzNDcyMQ@7"
  ],
  "extendedStyleguides": [
    {
      "id": "cHJqOjEzNDcyMQ",
      "name": "paths-styles",
      "slug": "paths-styles",
      "workspace": {
        "slug": "apistylebook",
        "name": "API Stylebook"
      },
      "icon": "paint-brush",
      "color": "#B33771",
      "latestRelease": {
        "release": 7
      }
    }
  ],
  "inheritedRules": [
    {
      "given": [
        "$.servers[*].url"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "(http:\\/\\/localhost)|(https).*"
        }
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "oas3-always-use-https",
      "message": "Servers must use the HTTPS protocol except when using localhost",
      "formats": [
        "oas3"
      ]
    },
    {
      "given": [
        "$.schemes.*"
      ],
      "severity": "warn",
      "then": {
        "function": "enumeration",
        "functionOptions": {
          "values": [
            "https"
          ]
        }
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "oas2-always-use-https",
      "message": "Servers must use the HTTPS protocol",
      "formats": [
        "oas2"
      ]
    },
    {
      "given": [
        "$.servers[*].url"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^[^A-Z]*$"
        }
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "server-lowercase",
      "message": "Server URL must be lowercase",
      "formats": [
        "oas3"
      ]
    },
    {
      "given": [
        "$.servers[*].url"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^.*\\/api/?.*"
        }
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "server-has-api",
      "message": "Server must have /api",
      "formats": [
        "oas3"
      ]
    },
    {
      "given": [
        "$.servers[*].url"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^.*\\/v[1-9]"
        }
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "server-version",
      "message": "Server must end with a version",
      "formats": [
        "oas3"
      ]
    },
    {
      "given": [
        "$.servers[*].url"
      ],
      "severity": "off",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\."
        }
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "server-major-version-only",
      "message": "Server should only have major versions",
      "formats": [
        "oas3"
      ]
    },
    {
      "given": [
        "$.paths"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^\\/([a-z0-9]+(-[a-z0-9]+)*)?(\\/[a-z0-9]+(-[a-z0-9]+)*|\\/{.+})*$"
        },
        "field": "@key"
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "path-casing",
      "message": "Paths must be kebab-case"
    },
    {
      "given": [
        "$.paths"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^((\\/v\\d+)*((\\/[\\w+-]*s)(\\/\\{.*\\})*)*)$"
        },
        "field": "@key"
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "resource-names-plural",
      "message": "Resource names should generally be plural"
    },
    {
      "given": [
        "$.paths"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\/$"
        },
        "field": "@key"
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "paths-no-trailing-slash",
      "message": "Paths must not end with a trailing slash"
    },
    {
      "given": [
        "$.paths"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "(JSON|json|XML|xml)"
        },
        "field": "@key"
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "paths-no-file-extensions",
      "message": "Paths must not have file extensions"
    },
    {
      "given": [
        "$.paths"
      ],
      "severity": "error",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "(GET|PUT|POST|DELETE|LIST|CREATE|REMOVE|get|put|post|delete|list|create|remove|Get|Put|Post|Delete|List|Create|Remove)"
        },
        "field": "@key"
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "paths-no-http-verbs",
      "message": "Paths must not have HTTP verbs in them"
    },
    {
      "given": [
        "$.paths"
      ],
      "severity": "off",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "match": "^(\\/v[1-9]|\\/version[1-9])"
        },
        "field": "@key"
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "paths-version-number",
      "message": "Paths must have a version in them"
    },
    {
      "given": [
        "$.paths"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "^(.*)([\\$&+,;=?@%]+)(.*)$",
          "match": ""
        },
        "field": "@key"
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "paths-avoid-special-characters",
      "message": "Avoid using special characters in paths"
    },
    {
      "given": [
        "$.paths"
      ],
      "severity": "warn",
      "then": {
        "function": "pattern",
        "functionOptions": {
          "notMatch": "\\?"
        },
        "field": "@key"
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "paths-no-query-params",
      "message": "Paths should not have query parameters in them. They should be defined separately in the OpenAPI."
    },
    {
      "given": [
        "$..parameters[?(@.in == 'path')].name"
      ],
      "severity": "error",
      "then": {
        "function": "casing",
        "functionOptions": {
          "type": "camel",
          "disallowDigits": true
        },
        "field": "name"
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "path-parameters-camelcase",
      "message": "Path parameters should be camelCase and not contain digits"
    },
    {
      "given": [
        "$..parameters[?(@.in == 'query')].name"
      ],
      "severity": "error",
      "then": {
        "function": "casing",
        "functionOptions": {
          "type": "camel",
          "disallowDigits": true
        }
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "query-parameters-camelcase",
      "message": "Query parameters should be camelCase and not contain digits"
    },
    {
      "given": [
        "$.paths[*][*].parameters[?(@.in == 'path')]"
      ],
      "severity": "warn",
      "then": {
        "function": "falsy"
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "path-parameters-on-path-only",
      "message": "Path parameters should be defined on the path level instead of the operation level."
    },
    {
      "given": [
        "$.paths~"
      ],
      "severity": "warn",
      "then": {
        "function": "truthy",
        "field": "\\/status"
      },
      "extendedFrom": "cHJqOjEzNDcyMQ@7",
      "name": "status-path-defined",
      "message": "APIs MUST have a status path defined (`/status`)"
    }
  ],
  "library": {
    "cHJqOjEzNDcyMQ@7": {
      "description": "",
      "formats": [
        "oas2",
        "oas3",
        "oas3.0",
        "oas3.1"
      ],
      "aliases": {},
      "rules": {
        "oas3-always-use-https": {
          "given": [
            "$.servers[*].url"
          ],
          "severity": "error",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "match": "(http:\\/\\/localhost)|(https).*"
            }
          },
          "name": "oas3-always-use-https",
          "message": "Servers must use the HTTPS protocol except when using localhost",
          "formats": [
            "oas3"
          ]
        },
        "oas2-always-use-https": {
          "given": [
            "$.schemes.*"
          ],
          "severity": "warn",
          "then": {
            "function": "enumeration",
            "functionOptions": {
              "values": [
                "https"
              ]
            }
          },
          "name": "oas2-always-use-https",
          "message": "Servers must use the HTTPS protocol",
          "formats": [
            "oas2"
          ]
        },
        "server-lowercase": {
          "given": [
            "$.servers[*].url"
          ],
          "severity": "error",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "match": "^[^A-Z]*$"
            }
          },
          "name": "server-lowercase",
          "message": "Server URL must be lowercase",
          "formats": [
            "oas3"
          ]
        },
        "server-has-api": {
          "given": [
            "$.servers[*].url"
          ],
          "severity": "error",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "match": "^.*\\/api/?.*"
            }
          },
          "name": "server-has-api",
          "message": "Server must have /api",
          "formats": [
            "oas3"
          ]
        },
        "server-version": {
          "given": [
            "$.servers[*].url"
          ],
          "severity": "error",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "match": "^.*\\/v[1-9]"
            }
          },
          "name": "server-version",
          "message": "Server must end with a version",
          "formats": [
            "oas3"
          ]
        },
        "server-major-version-only": {
          "given": [
            "$.servers[*].url"
          ],
          "severity": "error",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "notMatch": "\\."
            }
          },
          "name": "server-major-version-only",
          "message": "Server should only have major versions",
          "formats": [
            "oas3"
          ]
        },
        "path-casing": {
          "given": [
            "$.paths"
          ],
          "severity": "error",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "match": "^\\/([a-z0-9]+(-[a-z0-9]+)*)?(\\/[a-z0-9]+(-[a-z0-9]+)*|\\/{.+})*$"
            },
            "field": "@key"
          },
          "name": "path-casing",
          "message": "Paths must be kebab-case"
        },
        "resource-names-plural": {
          "given": [
            "$.paths"
          ],
          "severity": "warn",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "match": "^((\\/v\\d+)*((\\/[\\w+-]*s)(\\/\\{.*\\})*)*)$"
            },
            "field": "@key"
          },
          "name": "resource-names-plural",
          "message": "Resource names should generally be plural"
        },
        "paths-no-trailing-slash": {
          "given": [
            "$.paths"
          ],
          "severity": "error",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "notMatch": "\\/$"
            },
            "field": "@key"
          },
          "name": "paths-no-trailing-slash",
          "message": "Paths must not end with a trailing slash"
        },
        "paths-no-file-extensions": {
          "given": [
            "$.paths"
          ],
          "severity": "error",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "notMatch": "(JSON|json|XML|xml)"
            },
            "field": "@key"
          },
          "name": "paths-no-file-extensions",
          "message": "Paths must not have file extensions"
        },
        "paths-no-http-verbs": {
          "given": [
            "$.paths"
          ],
          "severity": "error",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "notMatch": "(GET|PUT|POST|DELETE|LIST|CREATE|REMOVE|get|put|post|delete|list|create|remove|Get|Put|Post|Delete|List|Create|Remove)"
            },
            "field": "@key"
          },
          "name": "paths-no-http-verbs",
          "message": "Paths must not have HTTP verbs in them"
        },
        "paths-version-number": {
          "given": [
            "$.paths"
          ],
          "severity": "error",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "match": "^(\\/v[1-9]|\\/version[1-9])"
            },
            "field": "@key"
          },
          "name": "paths-version-number",
          "message": "Paths must have a version in them"
        },
        "paths-avoid-special-characters": {
          "given": [
            "$.paths"
          ],
          "severity": "warn",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "notMatch": "^(.*)([\\$&+,;=?@%]+)(.*)$",
              "match": ""
            },
            "field": "@key"
          },
          "name": "paths-avoid-special-characters",
          "message": "Avoid using special characters in paths"
        },
        "paths-no-query-params": {
          "given": [
            "$.paths"
          ],
          "severity": "warn",
          "then": {
            "function": "pattern",
            "functionOptions": {
              "notMatch": "\\?"
            },
            "field": "@key"
          },
          "name": "paths-no-query-params",
          "message": "Paths should not have query parameters in them. They should be defined separately in the OpenAPI."
        },
        "path-parameters-camelcase": {
          "given": [
            "$..parameters[?(@.in == 'path')].name"
          ],
          "severity": "error",
          "then": {
            "function": "casing",
            "functionOptions": {
              "type": "camel",
              "disallowDigits": true
            },
            "field": "name"
          },
          "name": "path-parameters-camelcase",
          "message": "Path parameters should be camelCase and not contain digits"
        },
        "query-parameters-camelcase": {
          "given": [
            "$..parameters[?(@.in == 'query')].name"
          ],
          "severity": "error",
          "then": {
            "function": "casing",
            "functionOptions": {
              "type": "camel",
              "disallowDigits": true
            }
          },
          "name": "query-parameters-camelcase",
          "message": "Query parameters should be camelCase and not contain digits"
        },
        "path-parameters-on-path-only": {
          "given": [
            "$.paths[*][*].parameters[?(@.in == 'path')]"
          ],
          "severity": "warn",
          "then": {
            "function": "falsy"
          },
          "name": "path-parameters-on-path-only",
          "message": "Path parameters should be defined on the path level instead of the operation level."
        },
        "status-path-defined": {
          "given": [
            "$.paths~"
          ],
          "severity": "warn",
          "then": {
            "function": "truthy",
            "field": "\\/status"
          },
          "name": "status-path-defined",
          "message": "APIs MUST have a status path defined (`/status`)"
        }
      },
      "extendedDefault": true
    }
  },
  "extendedDefault": true
}